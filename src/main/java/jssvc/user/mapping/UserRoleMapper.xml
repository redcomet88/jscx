<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="jssvc.user.dao.UserRoleMapper" >
  <resultMap id="BaseResultMap" type="jssvc.user.model.UserRole" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="dah" property="dah" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="userRoleVoMap" type="jssvc.user.model.UserRoleVo" extends="BaseResultMap">
    <result column="ygxm" property="ygxm" jdbcType="VARCHAR" />
    <result column="jgmc" property="jgmc" jdbcType="VARCHAR" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="roleMap" type="jssvc.user.model.Role" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_description" property="roleDescription" jdbcType="VARCHAR" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, dah, role_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from t_user_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="jssvc.user.model.UserRole" >
    insert into t_user_role (id, dah, role_id
      )
    values (#{id,jdbcType=INTEGER}, #{dah,jdbcType=VARCHAR}, #{roleId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="jssvc.user.model.UserRole" >
    insert into t_user_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="dah != null" >
        dah,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="dah != null" >
        #{dah,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="jssvc.user.model.UserRole" >
    update t_user_role
    <set >
      <if test="dah != null" >
        dah = #{dah,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="jssvc.user.model.UserRole" >
    update t_user_role
    set dah = #{dah,jdbcType=VARCHAR},
      role_id = #{roleId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectCountByRoleId" resultType="int" parameterType="java.lang.Integer" >
    select
    count(1)
    from t_user_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </select>

  <select id="selectUserRoles" resultMap="userRoleVoMap" parameterType="jssvc.user.model.filter.UserSearchFilter" >
    select distinct
    a.dah, a.ygxm
    from t_user a
    left join t_user_role b on a.dah = b.dah
    left join t_role c on b.role_id = c.id
    left join t_dept_user d on a.dah = d.dah
    where a.flag = '0'
    <if test="jgh != null and jgh != ''">
      and find_in_set(d.jgh, #{jgh,jdbcType=VARCHAR})
    </if>
    <if test="roleName != null and roleName != ''">
      and c.role_name like CONCAT('%',#{roleName,jdbcType=VARCHAR},'%')
    </if>
    <if test="ygxm != null and ygxm != ''" >
      and a.ygxm like CONCAT('%',#{ygxm,jdbcType=VARCHAR},'%')
    </if>
    <if test="loginDah != 'admin'" >
      and (a.dah in
      (select distinct o.dah
      from t_dept_user o, t_data_authority p
      where o.jgh = p.jgh and p.dah = #{loginDah,jdbcType=VARCHAR}) or a.dah = #{loginDah,jdbcType=VARCHAR})
    </if>
    <if test="sortField != null" >
      order by a.${sortField} ${sortOrder}
    </if>
    <if test="limit != 0" >
      limit #{offset},#{limit}
    </if>
  </select>

  <select id="selectUserRolesCount" resultType="int" parameterType="jssvc.user.model.filter.UserSearchFilter" >
    select
    count(distinct a.dah)
    from t_user a
    left join t_user_role b on a.dah = b.dah
    left join t_role c on b.role_id = c.id
    left join t_dept_user d on a.dah = d.dah
    where a.flag = '0'
    <if test="jgh != null and jgh != ''">
      and find_in_set(d.jgh, #{jgh,jdbcType=VARCHAR})
    </if>
    <if test="roleName != null and roleName != ''">
      and c.role_name like CONCAT('%',#{roleName,jdbcType=VARCHAR},'%')
    </if>
    <if test="ygxm != null and ygxm != ''" >
      and a.ygxm like CONCAT('%',#{ygxm,jdbcType=VARCHAR},'%')
    </if>
    <if test="loginDah != 'admin'" >
      and (a.dah in
      (select distinct o.dah
      from t_dept_user o, t_data_authority p
      where o.jgh = p.jgh and p.dah = #{loginDah,jdbcType=VARCHAR}) or a.dah = #{loginDah,jdbcType=VARCHAR})
    </if>
  </select>
  <delete id="deleteByDah" parameterType="java.lang.String" >
    delete from t_user_role
    where dah = #{dah,jdbcType=VARCHAR}
  </delete>
  <select id="selectRolesByDah" resultMap="roleMap" parameterType="java.lang.String" >
    select
    b.id, b.role_name
    from t_user_role a
    inner join t_role b on a.role_id = b.id
    where a.dah = #{dah,jdbcType=VARCHAR}
  </select>
  <select id="selectCountByDahAndAction" resultType="int" parameterType="java.lang.String" >
    select
    count(1)
    from t_user_role o, t_role_function p, t_menu_function q
    where o.role_id = p.role_id
    and p.function_id = q.id
    and q.function_action = #{1,jdbcType=VARCHAR}
    and o.dah = #{0,jdbcType=VARCHAR}
  </select>
</mapper>