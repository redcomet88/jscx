<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="jssvc.user.dao.RoleMapper" >
  <resultMap id="BaseResultMap" type="jssvc.user.model.Role" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_description" property="roleDescription" jdbcType="VARCHAR" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="sso_role_id" property="ssoRoleId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, role_name, role_description, flag, create_time, update_time, sso_role_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from t_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="jssvc.user.model.Role">
    insert into t_role (id, role_name, role_description,
      flag, create_time, update_time, sso_role_id
      )
    values (#{id,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{roleDescription,jdbcType=VARCHAR},
      #{flag,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{ssoRoleId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="jssvc.user.model.Role" >
    insert into t_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
      <if test="roleDescription != null" >
        role_description,
      </if>
      <if test="flag != null" >
        flag,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="ssoRoleId != null" >
        sso_role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleDescription != null" >
        #{roleDescription,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ssoRoleId != null" >
        #{ssoRoleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="jssvc.user.model.Role" >
    update t_role
    <set >
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleDescription != null" >
        role_description = #{roleDescription,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ssoRoleId != null" >
        sso_role_id = #{ssoRoleId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="jssvc.user.model.Role" >
    update t_role
    set role_name = #{roleName,jdbcType=VARCHAR},
      role_description = #{roleDescription,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      sso_role_id = #{ssoRoleId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectRoles" resultMap="BaseResultMap" parameterType="jssvc.user.model.filter.UserSearchFilter" >
    select
    <include refid="Base_Column_List" />
    from t_role
    <where>
      <if test="roleName != null and roleName != ''" >
        role_name like CONCAT('%',#{roleName,jdbcType=VARCHAR},'%')
      </if>
    </where>
    <if test="sortField != null" >
      order by ${sortField} ${sortOrder}
    </if>
    <if test="limit != 0" >
      limit #{offset},#{limit}
    </if>
  </select>

  <select id="selectRolesCount" resultType="int" parameterType="jssvc.user.model.filter.UserSearchFilter" >
    select
    count(1)
    from t_role
    <where>
      <if test="roleName != null and roleName != ''" >
        role_name like CONCAT('%',#{roleName,jdbcType=VARCHAR},'%')
      </if>
    </where>
  </select>
  <select id="selectRoleByTyyhRoleId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select
    <include refid="Base_Column_List" />
    from t_role
    where sso_role_id = #{ssoRoleId,jdbcType=INTEGER}
  </select>
  <select id="getRoleList" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from t_role
  </select>
</mapper>